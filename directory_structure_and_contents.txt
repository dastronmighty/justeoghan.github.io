Directory: justeoghan.github.io
  File: tailwind.config.js
    Contents:
      // tailwind.config.js
      module.exports = {
        content: [
          "./src/**/*.{js,jsx,ts,tsx}",
        ],
        theme: {
          extend: {},
        },
        plugins: [],
      };
  File: CNAME
    Contents:
      eoghanhogan.ie
  File: directory_structure_and_contents.txt
    Contents:
  File: README.md
    Contents:
      Pages Site
  File: tsconfig.json
    Contents:
      {
        "compilerOptions": {
          "target": "es5",
          "lib": [
            "dom",
            "dom.iterable",
            "esnext"
          ],
          "allowJs": true,
          "skipLibCheck": true,
          "esModuleInterop": true,
          "allowSyntheticDefaultImports": true,
          "strict": true,
          "forceConsistentCasingInFileNames": true,
          "noFallthroughCasesInSwitch": true,
          "module": "esnext",
          "moduleResolution": "node",
          "resolveJsonModule": true,
          "isolatedModules": true,
          "noEmit": true,
          "jsx": "preserve"
        },
        "include": [
          "src"
        ]
      }
  File: postcss.config.js
    Contents:
      module.exports = {
        plugins: {
          tailwindcss: {},
          autoprefixer: {},
        },
      }
  File: file_printer.py
    Contents:
      import os
      
      
      def print_directory_contents(root_dir, output_file, ignored_dirs, ignored_files):
          """
          Recursively print the directory structure and file contents into the output file.
      
          Parameters:
          - root_dir: The directory to start scanning from (typically the root of the project).
          - output_file: The file where the directory structure and file contents will be written.
          - ignored_dirs: List of directories to ignore (e.g., node_modules, etc.).
          - ignored_files: List of specific files to ignore (e.g., .gitignore, package.json, etc.).
          """
      
          with open(output_file, "w", encoding="utf-8") as f:
              for dirpath, dirnames, filenames in os.walk(root_dir):
                  # Filter out ignored directories
                  dirnames[:] = [d for d in dirnames if d not in ignored_dirs]
      
                  # Write the current directory name
                  indent_level = dirpath.count(os.sep) - root_dir.count(os.sep)
                  f.write(f"{'  ' * indent_level}Directory: {os.path.basename(dirpath)}\n")
      
                  for filename in filenames:
                      # Skip ignored files
                      if filename in ignored_files:
                          continue
      
                      file_path = os.path.join(dirpath, filename)
      
                      # Write the file name
                      f.write(f"{'  ' * (indent_level + 1)}File: {filename}\n")
                      try:
                          # Write the file contents
                          with open(file_path, "r", encoding="utf-8") as file_content:
                              contents = file_content.read()
                              f.write(f"{'  ' * (indent_level + 2)}Contents:\n")
                              for line in contents.splitlines():
                                  f.write(f"{'  ' * (indent_level + 3)}{line}\n")
                      except Exception as e:
                          f.write(
                              f"{'  ' * (indent_level + 2)}Error reading file: {str(e)}\n"
                          )
      
      
      if __name__ == "__main__":
          # Specify the root directory (where the script is located)
          root_directory = os.path.dirname(os.path.abspath(__file__))
      
          # Specify the output file to save the directory structure and contents
          output_file_path = os.path.join(
              root_directory, "directory_structure_and_contents.txt"
          )
      
          # List of directories to ignore (e.g., 'node_modules' or any other directory you want to exclude)
          directories_to_ignore = [
              "node_modules",
              "dist",
              "venv",
              "__pycache__",
              ".snapshots",
              "misc",
              ".mypy_cache",
              ".alpackages",
              ".git",
              "build",
              "icons",
              "public",
          ]
      
          # List of specific files to ignore
          files_to_ignore = [
              ".gitignore",
              "package.json",
              "package-lock.json",
          ]
      
          # Call the function to print the directory structure and file contents
          print_directory_contents(
              root_directory, output_file_path, directories_to_ignore, files_to_ignore
          )
      
          print(f"Directory structure and file contents saved to {output_file_path}")
  Directory: .github
    Directory: workflows
      File: gh-pages.yml
        Contents:
          name: Deploy to GitHub Pages
          
          on:
            push:
              branches:
                - main  # Replace 'main' with your branch if different
          
          jobs:
            build:
              runs-on: ubuntu-latest
          
              permissions:
                contents: write  # Allow actions to push to the repo
          
              steps:
                - name: Checkout code
                  uses: actions/checkout@v2
          
                - name: Set up Node.js
                  uses: actions/setup-node@v2
                  with:
                    node-version: "21" 
          
                - name: Confirm Node.js version
                  run: node -v  # This checks the installed Node.js version
          
                - name: Install react-scripts@latest
                  run: npm install react-scripts@latest
          
                - name: Install dependencies
                  run: npm install
          
                - name: Build the project with OpenSSL Legacy Provider
                  run: npm run build
          
                - name: Copy CNAME file
                  run: |
                    if [ -f CNAME ]; then
                      cp CNAME build/
                    fi
          
                - name: Deploy to GitHub Pages
                  uses: peaceiris/actions-gh-pages@v3
                  with:
                    github_token: ${{ secrets.GITHUB_TOKEN }}
                    publish_dir: ./build  # Deploy content from the 'build' folder
                    publish_branch: gh-pages
                    force_orphan: true  # Force orphan commit, no branch history
  Directory: src
    File: index.tsx
      Contents:
        // src/index.tsx
        import React from 'react';
        import ReactDOM from 'react-dom/client';
        import { HashRouter, Route, Routes } from 'react-router-dom';
        import { HelmetProvider } from 'react-helmet-async';
        import './index.css';
        import App from './App';
        import BlogList from './blog/BlogList';
        import BlogPost from './blog/BlogPost';
        import reportWebVitals from './reportWebVitals';
        
        const root = ReactDOM.createRoot(
          document.getElementById('root') as HTMLElement
        );
        
        root.render(
          <React.StrictMode>
            <HelmetProvider>
              <HashRouter>
                <Routes>
                  <Route path="/" element={<App />} />
                  <Route path="/blog" element={<BlogList />} />
                  <Route path="/blog/:slug" element={<BlogPost />} />
                </Routes>
              </HashRouter>
            </HelmetProvider>
          </React.StrictMode>
        );
        
        
        // If you want to start measuring performance in your app, pass a function
        // to log results (for example: reportWebVitals(console.log))
        // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
        reportWebVitals();
    File: App.tsx
      Contents:
        import React from 'react';
        
        import HeroSection from './components/Hero';
        import AboutMe from './components/aboutme/Aboutme';
        import Timeline from './components/timeline';
        import Contact from './components/contact';
        import Footer from './components/footer';
        import Projects from './components/projects_certs';
        import Achievements from './components/achievements';
        
        const App: React.FC = () => {
          return (
            <div className="App" style={{
              backgroundColor: "rgb(243 244 246)"
            }}>
              <HeroSection />
        
              <AboutMe />
        
              <Achievements />
        
              <Timeline />
        
              <Projects />
        
              <Contact />
        
              <Footer />
            </div>
          );
        };
        
        
        export default App;
    File: App.css
      Contents:
    File: index.css
      Contents:
        @tailwind base;
        @tailwind components;
        @tailwind utilities;
        
        /* Add these lines to your main CSS file */
        @import "~slick-carousel/slick/slick.css";
        @import "~slick-carousel/slick/slick-theme.css";
        
        
        @import url('https://fonts.googleapis.com/css2?family=Afacad+Flux:wght@100..1000&family=Playwrite+DE+Grund:wght@100..400&display=swap');
        
        body {
          font-family: "Afacad Flux", sans-serif;
        }
        
        html {
          scroll-behavior: smooth;
        }
    File: setupTests.ts
      Contents:
        // jest-dom adds custom jest matchers for asserting on DOM nodes.
        // allows you to do things like:
        // expect(element).toHaveTextContent(/react/i)
        // learn more: https://github.com/testing-library/jest-dom
        import '@testing-library/jest-dom';
    File: reportWebVitals.ts
      Contents:
        import { ReportHandler } from 'web-vitals';
        
        const reportWebVitals = (onPerfEntry?: ReportHandler) => {
          if (onPerfEntry && onPerfEntry instanceof Function) {
            import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
              getCLS(onPerfEntry);
              getFID(onPerfEntry);
              getFCP(onPerfEntry);
              getLCP(onPerfEntry);
              getTTFB(onPerfEntry);
            });
          }
        };
        
        export default reportWebVitals;
    File: carousel.css
      Contents:
        /* Change the color of the previous and next arrows */
        .color-slider-button .slick-prev::before,
        .color-slider-button .slick-next::before {
            color: rgb(37 99 235);
        }
        
        /* Ensure the buttons have no background and borders */
        .color-slider-button .slick-prev,
        .color-slider-button .slick-next {
            background: transparent;
            border: none;
        }
        
        /* Optional: Hover effects */
        .color-slider-button .slick-prev:hover::before,
        .color-slider-button .slick-next:hover::before {
            color: black;
        }
        
        /* Optional: Adjust positioning if needed */
        .color-slider-button .slick-prev {
            left: -25px;
            /* Adjust based on your layout */
        }
        
        .color-slider-button .slick-next {
            right: -25px;
            /* Adjust based on your layout */
        }
    File: react-app-env.d.ts
      Contents:
        /// <reference types="react-scripts" />
    Directory: blog
      File: blogData.ts
        Contents:
          // src/blog/blogData.ts
          export const blogData = [
              {
                  id: 1,
                  title: "My First Blog Post",
                  slug: "my-first-blog-post",
                  description: "This is the description for my first blog post.",
                  contentFile: "/content/blog/first_blog.md",
                  datePublished: "2024-10-01"
              },
              {
                  id: 2,
                  title: "React Tips and Tricks",
                  slug: "react-tips-tricks",
                  description: "Learn some cool React tips and tricks.",
                  contentFile: "/content/blog/react_tips.md",
                  datePublished: "2024-01-02"
              },
              {
                  id: 3,
                  title: "Test Blog",
                  slug: "test-blog",
                  description: "Learn some cool React tips and tricks.",
                  contentFile: "/content/blog/test_blog.md",
                  datePublished: "2024-01-01"
              },
          ].sort((a, b) => new Date(b.datePublished).getTime() - new Date(a.datePublished).getTime());
      File: BlogList.tsx
        Contents:
          // src/blog/BlogList.tsx
          import React from 'react';
          import { Helmet } from 'react-helmet-async';
          import { blogData } from './blogData';
          import Footer from '../components/footer';
          import { Link } from 'react-router-dom';
          
          const BlogList: React.FC = () => {
              return (
                  <div className="flex flex-col min-h-screen">
                      <Helmet>
                          <title>Blog - Eoghan Hogan</title>
                          <meta name="description" content="Read insightful articles and blog posts by Eoghan Hogan about tech, projects, and more." />
                          <link rel="canonical" href="https://eoghanhogan.ie/blog" />
                      </Helmet>
                      <section className="py-20">
                          <div className="container mx-auto px-4 mb-4">
                              <Link to="/" className="text-blue-500 hover:underline">
                                  &larr; Back to home
                              </Link>
                          </div>
                          <div className="container mx-auto px-4">
                              <h2 className="relative text-4xl font-bold text-center mb-8">
                                  Blog
                                  <span className="absolute left-1/2 transform -translate-x-1/2 bottom-[-10px] w-48 h-1 bg-blue-400 rotate-2"></span>
                              </h2>
                              <div className="grid gap-8">
                                  {blogData.map((blog) => (
                                      <div key={blog.id} className="bg-white p-6 rounded-lg shadow-md">
                                          <h3 className="text-2xl font-bold mb-2">{blog.title}</h3>
                                          <p className="text-gray-700 mb-4">{blog.description}</p>
                                          <Link to={`/blog/${blog.slug}`} className="text-blue-500 hover:underline">
                                              Read more
                                          </Link>
                                      </div>
                                  ))}
                              </div>
                          </div>
                      </section>
                      <Footer />
                  </div>
              );
          };
          
          export default BlogList;
      File: BlogPost.tsx
        Contents:
          // src/blog/BlogPost.tsx
          import React, { useEffect, useState } from 'react';
          import { Helmet } from 'react-helmet-async';
          import { useParams } from 'react-router-dom';
          import { blogData } from './blogData';
          import Footer from '../components/footer';
          import MarkdownWrapper from '../components/mkdWrapper';
          import { Link } from 'react-router-dom';
          
          const BlogPost: React.FC = () => {
              const { slug } = useParams<{ slug: string }>();
              const blog = blogData.find((b) => b.slug === slug);
              const [content, setContent] = useState<string>('');
              const nextBlog = blog ? blogData.find((b) => new Date(b.datePublished) < new Date(blog.datePublished)) : undefined;
              const previousBlog = blog ? blogData.find((b) => new Date(b.datePublished) > new Date(blog.datePublished)) : undefined;
          
              useEffect(() => {
                  if (blog) {
                      fetch(blog.contentFile)
                          .then((response) => response.text())
                          .then((text) => setContent(text))
                          .catch((error) => console.error(`Error fetching blog content: `, error));
                  }
              }, [blog]);
          
              if (!blog) {
                  return <p>Blog post not found.</p>;
              }
          
              return (
                  <div className="flex flex-col min-h-screen">
                      <Helmet>
                          <title>{blog.title} - Eoghan Hogan Blog</title>
                          <meta name="description" content={blog.description} />
                          <link rel="canonical" href={`https://eoghanhogan.ie/blog/${blog.id}`} />
                          <script type="application/ld+json">
                              {JSON.stringify({
                                  "@context": "https://schema.org",
                                  "@type": "BlogPosting",
                                  "headline": blog?.title,
                                  "description": blog?.description,
                                  "author": {
                                      "@type": "Person",
                                      "name": "Eoghan Hogan",
                                  },
                                  "url": `https://eoghanhogan.ie/blog/${blog?.id}`,
                                  "datePublished": blog?.datePublished,
                              })}
                          </script>
                      </Helmet>
                      <section className="py-20">
                          <div className="container mx-auto px-4 mb-4">
                              <Link to="/blog" className="text-blue-500 hover:underline">
                                  &larr; Back to blogs
                              </Link>
                          </div>
                          <div className="container mx-auto px-4">
                              <h1 className="relative text-4xl font-bold mb-8 inline-block">
                                  {blog.title}
                                  <span className="absolute left-0 right-0 transform bottom-[-10px] w-full h-1 bg-blue-400 rotate-2"></span>
                              </h1>
                              <div className="bg-white shadow-lg rounded-lg p-6">
                                  <MarkdownWrapper content={content || 'Loading...'} />
                              </div>
                          </div>
                          <div className="container mx-auto px-4 text-center mt-8">
                              {previousBlog && (
                                  <Link to={`/blog/${previousBlog.slug}`} className="text-blue-500 hover:underline mr-8">
                                      &larr; Previous Blog: {previousBlog.title}
                                  </Link>
                              )}
                              {nextBlog && (
                                  <Link to={`/blog/${nextBlog.slug}`} className="text-blue-500 hover:underline">
                                      Next Blog: {nextBlog.title} &rarr;
                                  </Link>
                              )}
                          </div>
                      </section >
                      <Footer />
                  </div>
              );
          };
          
          export default BlogPost;
    Directory: components
      Directory: footer
        File: index.tsx
          Contents:
            import React from 'react';
            
            const Footer: React.FC = () => {
                return (
                    <footer className="bg-gray-900 text-white py-8">
                        <div className="container mx-auto px-4 text-center">
                            <div className="flex justify-center space-x-6 mb-4">
                                {/* GitHub Link */}
                                <a
                                    href="https://github.com/dastronmighty/justeoghan.github.io"
                                    aria-label="GitHub"
                                    className="hover:opacity-75 transition duration-300"
                                >
                                    <img src="/icons/github-mark-white.svg" alt="GitHub" className="w-8 h-8" />
                                </a>
            
                                {/* LinkedIn Link */}
                                <a
                                    href="https://www.linkedin.com/in/eoghanhogan99/"
                                    aria-label="LinkedIn"
                                    className="hover:opacity-75 transition duration-300"
                                >
                                    <img src="/icons/linkedin.svg" alt="LinkedIn" className="w-8 h-8" />
                                </a>
            
                            </div>
                            <p className="text-sm">&copy; {new Date().getFullYear()} Eoghan Hogan. All rights reserved.</p>
                        </div>
                    </footer>
                );
            };
            
            export default Footer;
      Directory: angledLine
        File: index.tsx
          Contents:
            import React from 'react';
            import './index.css'
            
            const AngledLine: React.FC = () => {
                return (
                    <div className="relative w-full h-24">
                        <div className="absolute inset-0 clip-angled-transition"></div>
                    </div>
                );
            };
            
            export default AngledLine;
        File: index.css
          Contents:
            .clip-angled-transition {
                z-index: 10;
                width: 100%;
                height: 100%;
                clip-path: polygon(100% 0, 100% 6%, 0 100%, 0 95%);
                position: relative;
                background-color: rgb(96 165 250);
            }
      Directory: contact
        File: index.tsx
          Contents:
            import React, { useEffect, useState } from 'react';
            import { PopupButton } from "react-calendly";
            
            const Contact: React.FC = () => {
                const [rootElement, setRootElement] = useState<HTMLElement | null>(null);
            
                // Use useEffect to set the root element after component mounts
                useEffect(() => {
                    const root = document.getElementById('contact');
                    if (root) {
                        setRootElement(root);
                    }
                }, []);
            
            
                return (
                    <section id="contact" className="py-20">
                        <div className="container mx-auto px-4">
                            <h2 className="relative text-4xl font-bold text-center mb-8">
                                Contact Me
                                <span className="absolute left-1/2 transform -translate-x-1/2 bottom-[-10px] w-48 h-1 bg-blue-400 rotate-2"></span>
                            </h2>
            
                            {/* Updated Coffee Chat Text */}
                            <p className="text-center text-xl md:text-2xl mb-8 text-gray-700">
                                Book some time for a coffee chat ☕️
                            </p>
            
                            {/* Calendly Button Triggering Popup */}
                            <div className="text-center mb-8">
                                {rootElement && (
                                    <PopupButton
                                        url="https://calendly.com/eoghanthehogan/coffee-chat"
                                        rootElement={rootElement}
                                        text="Schedule a Meeting"
                                        className="inline-block bg-blue-500 text-white py-3 px-6 rounded-lg hover:bg-blue-600 transition duration-300"
                                    />
                                )}
                            </div>
            
                            {/* Updated Shoot Me a Message Text */}
                            <p className="text-center text-xl md:text-2xl mb-6 text-gray-700">
                                Or send me a message
                            </p>
            
                            <form
                                id="contact-form"
                                action="https://formspree.io/f/mblrvzwy"
                                method="POST"
                                className="max-w-2xl mx-auto bg-white shadow-xl rounded-lg p-8 mt-8"
                            >
                                <div className="mb-6">
                                    <label htmlFor="name" className="block text-lg font-semibold mb-2">
                                        Name<span aria-hidden="true" className="text-red-500">*</span>
                                    </label>
                                    <input
                                        type="text"
                                        id="name"
                                        name="name"
                                        required
                                        aria-required="true"
                                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
            
                                <div className="mb-6">
                                    <label htmlFor="email" className="block text-lg font-semibold mb-2">
                                        Email<span aria-hidden="true" className="text-red-500">*</span>
                                    </label>
                                    <input
                                        type="email"
                                        id="email"
                                        name="_replyto"
                                        required
                                        aria-required="true"
                                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                </div>
            
                                <div className="mb-6">
                                    <label htmlFor="message" className="block text-lg font-semibold mb-2">
                                        Message<span aria-hidden="true" className="text-red-500">*</span>
                                    </label>
                                    <textarea
                                        id="message"
                                        name="message"
                                        required
                                        aria-required="true"
                                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                        rows={5}
                                    ></textarea>
                                </div>
            
                                <button
                                    type="submit"
                                    className="w-full bg-blue-500 text-white font-semibold py-3 rounded-lg hover:bg-blue-600 transition duration-300"
                                >
                                    Send Message
                                </button>
                            </form>
            
                            <hr className="my-8 border-gray-100" />
            
                            <div className="text-center">
                                <a
                                    href="cv/CV0924.pdf"
                                    className="inline-block bg-gray-800 text-white py-3 px-6 rounded-lg font-semibold hover:bg-gray-900 transition duration-300"
                                    aria-label="Download CV"
                                    download
                                >
                                    Download CV
                                </a>
                            </div>
                        </div>
                    </section>
                );
            };
            
            export default Contact;
      Directory: projects_certs
        File: index.tsx
          Contents:
            import React from "react";
            import Slider from "react-slick";
            import { projectCertData } from "./data";
            import "../../carousel.css"
            
            const ProjectsAndCourses: React.FC = () => {
            
                const settings = {
                    dots: false,
                    infinite: true,
                    speed: 1000,
                    slidesToShow: 2,
                    slidesToScroll: 2,
                    responsive: [
                        {
                            breakpoint: 1024, // Tablet view
                            settings: {
                                slidesToShow: 2,
                            },
                            dots: false, // Show dots on mobile
                            arrows: true, // Hide arrows on mobile
                        },
                        {
                            breakpoint: 768, // Mobile view
                            settings: {
                                slidesToShow: 1,
                                slidesToScroll: 1,
                                dots: true, // Show dots on mobile
                                arrows: false, // Hide arrows on mobile
                            },
                        },
                        {
                            breakpoint: 640, // Smaller mobile view
                            settings: {
                                slidesToShow: 1,
                                slidesToScroll: 1,
                                dots: true, // Ensure dots are shown
                                arrows: false, // Hide arrows on mobile
                            },
                        },
                    ],
                };
            
                return (
                    <section id="projects" className="py-20">
                        <div className="container mx-auto px-4">
                            <h2 className="relative text-4xl font-bold text-center mb-8">
                                Projects & Courses
                                <span className="absolute left-1/2 transform -translate-x-1/2 bottom-[-10px] w-48 h-1 bg-blue-400 rotate-2"></span>
                            </h2>
                            <Slider {...settings} className="color-slider-button">
                                {projectCertData.map((item, index) => (
                                    <div key={index} className="p-4">
                                        <div className="bg-white shadow-lg rounded-lg overflow-hidden p-4 md:p-6 backdrop-blur-md h-auto md:h-56 flex flex-col">
                                            <h3 className="text-lg md:text-xl font-semibold mb-2 text-blue-900">
                                                {item.title}
                                            </h3>
                                            <p className="text-sm md:text-base text-gray-700 mb-4 flex-grow">
                                                {item.description}
                                            </p>
            
                                            {/* Conditional rendering for GitHub link or Certificate */}
                                            {item.githubLink ? (
                                                <a
                                                    href={item.githubLink}
                                                    target="_blank"
                                                    rel="noopener noreferrer"
                                                    className="inline-block bg-blue-500 text-white py-2 px-3 md:px-4 rounded-lg hover:bg-blue-600 transition duration-300 mt-auto w-full md:w-3/6 text-center flex items-center justify-center"
                                                >
                                                    <img
                                                        src="/icons/github-mark-white.svg"
                                                        alt="GitHub"
                                                        className="w-5 h-5 mr-2"
                                                    />
                                                    View on GitHub
                                                </a>
                                            ) : (
                                                <a
                                                    href={item.certificateLink}
                                                    target="_blank"
                                                    rel="noopener noreferrer"
                                                    className="inline-block bg-blue-500 text-white py-2 px-3 md:px-4 rounded-lg hover:bg-blue-600 transition duration-300 mt-auto w-full md:w-3/6 text-center flex items-center justify-center"
                                                >
                                                    <img
                                                        src="/icons/certificate-svgrepo-com-2.svg"
                                                        alt="Certificate"
                                                        className="w-5 h-5 mr-2"
                                                    />
                                                    View Certificate
                                                </a>
                                            )}
                                        </div>
                                    </div>
                                ))}
                            </Slider>
                        </div>
                    </section>
                );
            };
            
            export default ProjectsAndCourses;
        File: data.ts
          Contents:
            export const projectCertData = [
                {
                    title: "Gamma Gym",
                    description: "Final Year thesis which won me the Franz Geiselbrechtinger Medal for best project in a Domain.",
                    githubLink: "https://github.com/dastronmighty/gammagym/blob/main/no_code/GammaGym.pdf",
                    year: "2021"
                },
                {
                    title: "MCM Project",
                    description: "During college me and Two Colleagues entered the Mathematical Competition in Modelling. We got a \"Honorable Mention\" which only about 21% of teams get.",
                    githubLink: "https://github.com/dastronmighty/MCM-2019/blob/latex_file/Super_Drone_Fleet.pdf",
                    year: "2019"
                },
                {
                    title: "Prompt Engineering for ChatGPT",
                    description: "Completed the Prompt Engineering for ChatGPT by Vanderbilt University on Coursera.",
                    year: "2024",
                    certificateLink: "https://coursera.org/share/01e0be33ccc48d5f1bc8c085baec8714",
                },
                {
                    title: "Generative AI Essentials: Overview and Impact",
                    description: "Completed the Generative AI Essentials: Overview and Impact course by University of Michigan on Coursera.",
                    year: "2024",
                    certificateLink: "https://coursera.org/share/8ecd5d2cbbe5f5e984003488fde429e2",
                },
                {
                    title: "Introduction to Cloud Computing",
                    description: "Completed the Introduction to Cloud Computing by IBM on Coursera.",
                    year: "2023",
                    certificateLink: "https://coursera.org/share/bd6e51ffb2a9fdfefa22aabae69d8337",
                },
                {
                    title: "Introduction to Large Language Models",
                    description: "Completed the Introduction to Large Language Modelst course by Google Cloud on Coursera.",
                    year: "2024",
                    certificateLink: "https://coursera.org/share/7665331001b3c4898be5de42c95f4654",
                },
                {
                    title: "Generative AI with Large Language Models",
                    description: "Completed the Generative AI with Large Language Models course by DeepLearning.AI on Coursera.",
                    year: "2024",
                    certificateLink: "https://coursera.org/share/2079c8d3624d4d0ab5147febf59f643f",
                },
                {
                    title: "URL Shortener",
                    description: "A URL shortner Project built with React and MongoDB.",
                    githubLink: "https://github.com/dastronmighty/url-shortener",
                    year: "2018"
                },
                {
                    title: "PHP API Showcase",
                    description: "Basically I was interested in checking out PHP as a backend and this shows how useful it can be.",
                    githubLink: "https://github.com/dastronmighty/php-api-showcase",
                    year: "2023"
                },
                {
                    title: "FitTogether",
                    description: "A MERN stack app for fitness groups. Create, Join and find new friends with this all in one fitness group apps.",
                    githubLink: "https://github.com/dastronmighty/Fit-Together",
                    year: "2018"
                },
                {
                    title: "Naughts and Crosses React App",
                    description: "A React App using Minimax to plpay Xs and Os.",
                    githubLink: "https://github.com/dastronmighty/x-o-react-app",
                    year: "2022"
                },
            ];
      Directory: achievements
        File: index.tsx
          Contents:
            import React from 'react';
            import Slider from 'react-slick';
            import { achievementsData, Achievement } from './data';
            import 'slick-carousel/slick/slick.css';
            import 'slick-carousel/slick/slick-theme.css';
            import "../../carousel.css"
            
            const Achievements: React.FC = () => {
                // Define the settings for react-slick carousel
                const settings = {
                    dots: false, // Show dots below the carousel
                    infinite: true, // Enable infinite loop
                    speed: 500, // Animation speed
                    slidesToShow: 2, // Number of slides to show at once
                    slidesToScroll: 1, // Number of slides to scroll per click
                    responsive: [
                        {
                            breakpoint: 1024, // Tablet view
                            settings: {
                                slidesToShow: 2
                            },
                            dots: false, // Show dots on mobile
                            arrows: true, // Hide arrows on mobile
                        },
                        {
                            breakpoint: 768, // Mobile view
                            settings: {
                                slidesToShow: 1,
                                slidesToScroll: 1,
                                dots: true, // Show dots on mobile
                                arrows: false, // Hide arrows on mobile
                            },
                        },
                        {
                            breakpoint: 640, // Smaller mobile view
                            settings: {
                                slidesToShow: 1,
                                slidesToScroll: 1,
                                dots: true, // Ensure dots are shown
                                arrows: false, // Hide arrows on mobile
                            },
                        },
                    ],
                };
            
                return (
                    <section id="achievements" className="py-20">
                        <div className="container mx-auto px-4">
                            <h2 className="relative text-4xl font-bold text-center mb-8">
                                Achievements
                                <span className="absolute left-1/2 transform -translate-x-1/2 bottom-[-10px] w-48 h-1 bg-blue-400 rotate-2"></span>
                            </h2>
            
                            {/* React Slick Slider */}
                            <Slider {...settings} className='color-slider-button'>
                                {achievementsData.map((achievement: Achievement, index: number) => (
                                    <div key={index} className="p-4">
                                        <div className="bg-white shadow-lg rounded-lg p-6 backdrop-blur-md">
                                            {achievement.icon && (
                                                <img
                                                    src={achievement.icon}
                                                    alt={`${achievement.title} icon`}
                                                    className="w-12 h-12 mb-4"
                                                />
                                            )}
                                            <h3 className="text-xl font-semibold mb-2">{achievement.title}</h3>
                                            <p className="text-gray-700 mb-4">{achievement.description}</p>
                                            <p className="text-gray-500 mb-4">{achievement.date}</p>
                                            {achievement.link && (
                                                <a
                                                    href={achievement.link}
                                                    target="_blank"
                                                    rel="noopener noreferrer"
                                                    className="text-blue-500 hover:underline"
                                                >
                                                    View Certificate
                                                </a>
                                            )}
                                        </div>
                                    </div>
                                ))}
                            </Slider>
                        </div>
                    </section>
                );
            };
            
            export default Achievements;
        File: data.ts
          Contents:
            export interface Achievement {
                title: string;
                description: string;
                date: string;
                icon?: string;
                link?: string;
            }
            
            export const achievementsData: Achievement[] = [
                {
                    title: "Bachelor of Science in Computer Science With Data Science",
                    description: "First Class Honours with a focus on Data Science from University College Dublin.",
                    date: "2017 - 2021",
                    icon: "/icons/degree-credential.svg",
                },
                {
                    title: "Franz Geiselbrechtinger Medal",
                    description: "Franz Geiselbrechtinger Medal for best Final Year Project.",
                    date: "2021",
                    icon: "/icons/award-2.svg",
                },
                {
                    title: "Mathematical Competition in Modellign Honourable Mention",
                    description: "During college me and Two Colleagues entered the Mathematical Competition in Modelling. We got a \"Honorable Mention\" which only about 21% of teams get",
                    date: "2019",
                    icon: "/icons/features-alt.svg",
                },
                {
                    title: "KPMG Dublin Case Study Competion",
                    description: "Came First place in KPMG Case Study Competition in Dublin.",
                    date: "2019",
                    icon: "/icons/features-alt.svg",
                }
            ];
      Directory: mkdWrapper
        File: index.tsx
          Contents:
            import React from 'react';
            import ReactMarkdown from 'react-markdown';
            import remarkGfm from 'remark-gfm';
            
            
            const MarkdownWrapper: React.FC<{ content: string }> = ({ content }) => {
                return (
                    <ReactMarkdown
                        remarkPlugins={[remarkGfm]}
                        components={{
                            h1: ({ children }) => <h1 className="text-4xl font-bold mb-4">{children}</h1>,
                            h2: ({ children }) => <h2 className="text-3xl font-semibold mb-3">{children}</h2>,
                            h3: ({ children }) => <h3 className="text-2xl font-medium mb-2">{children}</h3>,
                            p: ({ children }) => <p className="text-lg leading-relaxed mb-4">{children}</p>,
                            ul: ({ children }) => <ul className="list-disc pl-5 mb-4">{children}</ul>,
                            ol: ({ children }) => <ol className="list-decimal pl-5 mb-4">{children}</ol>,
                            a: ({ href, children }) => (
                                <a href={href} className="text-blue-500 hover:underline">
                                    {children}
                                </a>
                            ),
                        }}
                    >
                        {content}
                    </ReactMarkdown>
                );
            };
            
            export default MarkdownWrapper;
      Directory: aboutme
        File: Aboutme.tsx
          Contents:
            import React, { useEffect, useState } from 'react';
            import MarkdownWrapper from '../mkdWrapper';
            import { Link } from 'react-router-dom';
            
            const AboutMe: React.FC = () => {
                const [content, setContent] = useState<string>('');
            
                useEffect(() => {
                    fetch('/content/aboutme.md')
                        .then((response) => response.text())
                        .then((text) => setContent(text));
                }, []);
            
                return (
                    <section id="about" className="py-20">
                        <div className="container mx-auto px-4">
                            <h2 className="relative text-4xl font-bold text-center mb-8">
                                About Me
                                <span className="absolute left-1/2 transform -translate-x-1/2 bottom-[-10px] w-48 h-1 bg-blue-400 rotate-2"></span>
                            </h2>
                            <div className="relative text-lg leading-8 text-gray-700 max-w-6xl mx-auto p-6 bg-white backdrop-blur-md rounded-xl shadow-xl">
                                <MarkdownWrapper content={content} />
                            </div>
                        </div>
                        <div className="container mx-auto px-4 text-center py-8">
                            <Link to="/blog" className="inline-block bg-blue-500 text-white py-3 px-6 rounded-lg hover:bg-blue-600 transition duration-300">
                                Visit the Blog
                            </Link>
                        </div>
                    </section>
                );
            };
            
            export default AboutMe;
      Directory: Hero
        File: Boid.ts
          Contents:
            import { Vector, p5InstanceExtensions } from "p5";
            import { Cluster } from './types';
            
            export class Boid {
                p5: p5InstanceExtensions;
                position: Vector;
                velocity: Vector;
                acceleration: Vector;
                maxForce: number;
                maxSpeed: number;
                size: number;
                cluster: Cluster | null;
            
                constructor(x: number, y: number, p5: p5InstanceExtensions) {
                    this.p5 = p5;
                    this.position = Vector.fromAngle(Math.random() * Math.PI * 2).mult(100).add(x, y);
                    this.velocity = Vector.random2D();
                    this.velocity.setMag(Math.random() * 2 + 2);
                    this.acceleration = this.p5.createVector(0, 0);
                    this.maxForce = 0.2;
                    this.maxSpeed = 4;
                    this.size = 6;
                    this.cluster = null;
                }
            
                edges(width: number, height: number) {
                    if (this.position.x > width) this.position.x = 0;
                    else if (this.position.x < 0) this.position.x = width;
            
                    if (this.position.y > height) this.position.y = 0;
                    else if (this.position.y < 0) this.position.y = height;
                }
            
                align(boids: Boid[]): Vector {
                    let perceptionRadius = 50;
                    let steering = this.p5.createVector(0, 0);
                    let total = 0;
                    for (let other of boids) {
                        let d = Vector.dist(this.position, other.position);
                        if (other !== this && d < perceptionRadius) {
                            steering.add(other.velocity);
                            total++;
                        }
                    }
                    if (total > 0) {
                        steering.div(total);
                        steering.setMag(this.maxSpeed);
                        steering.sub(this.velocity);
                        steering.limit(this.maxForce);
                    }
                    return steering;
                }
            
                cohesion(boids: Boid[]): Vector {
                    let perceptionRadius = 50;
                    let steering = this.p5.createVector(0, 0);
                    let total = 0;
                    for (let other of boids) {
                        let d = Vector.dist(this.position, other.position);
                        if (other !== this && d < perceptionRadius) {
                            steering.add(other.position);
                            total++;
                        }
                    }
                    if (total > 0) {
                        steering.div(total);
                        steering.sub(this.position);
                        steering.setMag(this.maxSpeed);
                        steering.sub(this.velocity);
                        steering.limit(this.maxForce);
                    }
                    return steering;
                }
            
                separation(boids: Boid[]): Vector {
                    let perceptionRadius = 24;
                    let steering = this.p5.createVector(0, 0);
                    let total = 0;
                    for (let other of boids) {
                        let d = Vector.dist(this.position, other.position);
                        if (other !== this && d < perceptionRadius) {
                            let diff = Vector.sub(this.position, other.position);
                            diff.div(d * d); // Weight by distance
                            steering.add(diff);
                            total++;
                        }
                    }
                    if (total > 0) {
                        steering.div(total);
                        steering.setMag(this.maxSpeed);
                        steering.sub(this.velocity);
                        steering.limit(this.maxForce);
                    }
                    return steering;
                }
            
                flock(boids: Boid[]) {
                    let alignment = this.align(boids);
                    let cohesion = this.cohesion(boids);
                    let separation = this.separation(boids);
            
                    alignment.mult(1.0);
                    cohesion.mult(1.0);
                    separation.mult(1.5);
            
                    this.acceleration.add(alignment);
                    this.acceleration.add(cohesion);
                    this.acceleration.add(separation);
                }
            
                update() {
                    this.position.add(this.velocity);
                    this.velocity.add(this.acceleration);
                    this.velocity.limit(this.maxSpeed);
                    this.acceleration.mult(0);
                }
            
                show(clusterColor: number[]) {
                    let theta = this.velocity.heading() + this.p5.PI / 2;
            
                    this.p5.fill(clusterColor[0], clusterColor[1], clusterColor[2], clusterColor[3]);
                    this.p5.noStroke();
            
                    this.p5.push();
                    this.p5.translate(this.position.x, this.position.y);
                    this.p5.rotate(theta);
                    this.p5.beginShape();
                    this.p5.vertex(0, -this.size * 2);
                    this.p5.vertex(-this.size, this.size * 2);
                    this.p5.vertex(this.size, this.size * 2);
                    this.p5.endShape(this.p5.CLOSE);
                    this.p5.pop();
                }
            }
        File: index.tsx
          Contents:
            import React, { useRef, useEffect } from 'react';
            import p5 from "p5";
            import { Boid } from './Boid';
            import { ClusterClass } from './ClusterClass';
            import { Cluster } from './types';
            import './Hero.css'
            
            const HeroSection: React.FC = () => {
                const sketchRef = useRef<HTMLDivElement>(null);
            
                useEffect(() => {
                    let myp5: p5;
            
                    const sketch = (p: p5) => {
                        let boids: Boid[] = [];
                        const BOID_COUNT = 100;
                        let clusters: Cluster[] = [];
                        let distanceThreshold = 50;
            
                        // Define pastel colors with RGBA
                        const pastelColors: { [key: string]: number[] } = {
                            white: [0, 0, 0, 200],
                            pastelBlue: [89, 144, 245, 200],
                            pastelGreen: [119, 221, 119, 200],
                            pastelRed: [255, 105, 97, 200],
                        };
            
                        p.setup = () => {
                            p.createCanvas(p.windowWidth, p.windowHeight);
                            p.background(230, 230, 230);
            
                            // Initialize boids
                            for (let i = 0; i < BOID_COUNT; i++) {
                                boids.push(new Boid(p.random(p.width), p.random(p.height), p));
                            }
                        };
            
                        p.draw = () => {
                            p.background(220, 220, 220, 150); // Semi-transparent background for trailing effect
            
                            // Reset clusters
                            clusters = [];
            
                            // Assign boids to clusters
                            assignClusters();
            
                            // Assign colors to clusters based on their sizes
                            assignClusterColors();
            
                            // Update and display boids
                            for (let boid of boids) {
                                boid.edges(p.width, p.height);
                                boid.flock(boids);
                                boid.update();
                                if (boid.cluster) {
                                    boid.show(boid.cluster.color);
                                }
                            }
                        };
            
                        function assignClusters() {
                            for (let boid of boids) {
                                let added = false;
                                for (let cluster of clusters) {
                                    for (let member of cluster.members) {
                                        let d = p.dist(
                                            boid.position.x,
                                            boid.position.y,
                                            member.position.x,
                                            member.position.y
                                        );
                                        if (d < distanceThreshold) {
                                            cluster.members.push(boid);
                                            boid.cluster = cluster;
                                            added = true;
                                            break;
                                        }
                                    }
                                    if (added) break;
                                }
                                if (!added) {
                                    // Create a new cluster
                                    let newCluster = new ClusterClass();
                                    newCluster.members.push(boid);
                                    clusters.push(newCluster);
                                    boid.cluster = newCluster;
                                }
                            }
                        }
            
                        function assignClusterColors() {
                            for (let cluster of clusters) {
                                let size = cluster.members.length;
                                if (size >= 1 && size <= 5) {
                                    cluster.color = pastelColors.white;
                                } else if (size > 5 && size <= 10) {
                                    cluster.color = pastelColors.pastelBlue;
                                } else if (size > 10 && size <= 20) {
                                    cluster.color = pastelColors.pastelGreen;
                                } else {
                                    cluster.color = pastelColors.pastelRed;
                                }
                            }
                        }
            
                        p.windowResized = () => {
                            p.resizeCanvas(p.windowWidth, p.windowHeight);
                        };
                    };
            
                    myp5 = new p5(sketch, sketchRef.current!);
            
                    return () => {
                        myp5.remove();
                    };
                }, []);
            
                return (
                    <header className="relative w-full h-screen overflow-hidden" style={{ backgroundColor: "rgb(230, 230, 230)" }}>
                        <div ref={sketchRef} className="absolute top-0 left-0 w-full h-full"></div>
                        <div className="absolute inset-0 clip-angled-transition-hero "></div>
                        <div className="absolute inset-0 bg-gray-100 border-angled-transition-hero"></div>
                        <div className="absolute top-0 left-0 w-full h-full flex flex-col items-center justify-center text-black z-20">
                            <h1 className="relative text-5xl md:text-6xl lg:text-7xl font-bold">
                                Eoghan Hogan
                                <span className="absolute left-0 bottom-[-10px] w-full h-1 bg-blue-400 transform rotate-1"></span>
                            </h1>
                            <h2 className="mt-4 text-2xl md:text-3xl lg:text-4xl">Imagine. Create. Commit.</h2>
                        </div>
                    </header>
                );
            };
            
            export default HeroSection;
        File: Hero.css
          Contents:
            .clip-angled-transition-hero {
                position: absolute;
                bottom: 0;
                left: 0;
                right: 0;
                height: 100%;
                width: 100%;
                z-index: 5;
                clip-path: polygon(0 100%, 100% 90%, 100% 100%);
                background-color: rgb(243 244 246);
            }
            
            .border-angled-transition-hero {
                position: absolute;
                bottom: 0;
                left: 0;
                right: 0;
                height: 100%;
                width: 100%;
                z-index: 10;
                clip-path: polygon(100% 89%, 100% 90%, 0 100%, 0 99%);
                background-color: rgb(96 165 250 / var(--tw-bg-opacity));
            }
        File: types.ts
          Contents:
            import { Boid } from './Boid';
            
            export interface Cluster {
                members: Boid[];
                color: number[];
            }
        File: ClusterClass.ts
          Contents:
            import { Cluster } from './types';
            import { Boid } from './Boid';
            
            export class ClusterClass implements Cluster {
                members: Boid[];
                color: number[];
            
                constructor() {
                    this.members = [];
                    this.color = [255, 255, 255, 200]; // Default to white
                }
            }
      Directory: timeline
        File: index.tsx
          Contents:
            import React, { useState, useEffect } from "react";
            import { timelineData } from "./data";
            import MarkdownWrapper from "../mkdWrapper";
            
            const Timeline: React.FC = () => {
                const [contentData, setContentData] = useState<{ [key: string]: string }>({});
            
                // Function to get the icon along with width and height properties
                const getIcon = (type: number) => {
                    switch (type) {
                        case 1:
                            return { src: "/icons/apple.svg", width: 30, height: 30 }; // Apple related positions
                        case 2:
                            return { src: "/icons/work.svg", width: 30, height: 30 }; // Internship positions
                        case 3:
                            return { src: "/icons/college.svg", width: 50, height: 50 }; // Education
                        default:
                            return { src: "/icons/pencilruler.svg", width: 25, height: 25 }; // Early or undefined work
                    }
                };
            
                // Function to fetch the content file
                const fetchContent = (contentFile: string, index: number) => {
                    fetch(contentFile)
                        .then((response) => response.text())
                        .then((text) => {
                            setContentData((prevContentData) => ({
                                ...prevContentData,
                                [index]: text, // Store content based on index
                            }));
                        })
                        .catch((error) => console.error(`Error fetching ${contentFile}: `, error));
                };
            
                // Fetch content for all timeline items
                useEffect(() => {
                    timelineData.forEach((item, index) => {
                        if (item.contentFile) {
                            fetchContent(item.contentFile, index);
                        }
                    });
                }, []);
            
                return (
                    <section id="timeline" className="py-20">
                        <div className="container mx-auto px-4">
                            <h2 className="relative text-4xl font-bold text-center mb-8">
                                Timeline
                                <span className="absolute left-1/2 transform -translate-x-1/2 bottom-[-10px] w-48 h-1 bg-blue-400 rotate-2"></span>
                            </h2>
                            <div className="timeline">
                                {timelineData.map((item, index) => (
                                    <div
                                        key={index}
                                        className="timeline-item backdrop-blur-md backdrop-brightness-150 bg-white rounded-lg p-6 mb-6 shadow-xl"
                                    >
                                        <div className="flex items-center justify-between mb-2">
                                            {/* Adjust width and height for each icon */}
                                            <img
                                                src={getIcon(item.iconType).src}
                                                alt="icon"
                                                className="w-auto h-auto"
                                                style={{ width: getIcon(item.iconType).width, height: getIcon(item.iconType).height }}
                                            />
                                            <h3 className="text-xl font-semibold text-right text-blue-900">{item.year}</h3>
                                        </div>
                                        <div className="text-gray-800">
                                            <MarkdownWrapper content={contentData[index] || 'Loading content...'} />
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </section>
                );
            };
            
            export default Timeline;
        File: data.ts
          Contents:
            export const timelineData = [
                {
                    year: 'Nov 2023 - Present',
                    iconType: 1,
                    contentFile: '/content/timeline/apple_nov_23_pres.md',
                },
                {
                    year: 'Apr 2023 - Nov 2023',
                    iconType: 1,
                    contentFile: '/content/timeline/chorus.md',
                },
                {
                    year: 'Sep 2021 - Apr 2023',
                    iconType: 1,
                    contentFile: '/content/timeline/apple_sep_21_apr_23.md',
                },
                {
                    year: '2017 - 2021',
                    iconType: 3,
                    contentFile: '/content/timeline/college.md',
                },
                {
                    year: 'Mar 2020 - Sep 2020',
                    iconType: 1,
                    contentFile: '/content/timeline/apple_intern.md',
                },
                {
                    year: 'Jun 2019 - Jul 2019',
                    iconType: 2,
                    contentFile: '/content/timeline/bizintra.md',
            
                },
                {
                    year: 'Jun 2018 - Aug 2018',
                    iconType: 2,
                    contentFile: '/content/timeline/cartrawler.md',
                }
            ];
