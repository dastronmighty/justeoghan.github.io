Directory: justeoghan.github.io
  File: CNAME
    Contents:
      eoghanhogan.ie
  File: webpack.config.js
    Contents:
      const path = require('path');
      const HtmlWebpackPlugin = require('html-webpack-plugin');
      const MiniCssExtractPlugin = require('mini-css-extract-plugin');
      const CopyWebpackPlugin = require('copy-webpack-plugin');
      const TerserPlugin = require('terser-webpack-plugin');
      const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
      
      module.exports = {
        entry: './src/ts/script.ts', // Entry point for TypeScript
        output: {
          filename: 'bundle.[contenthash].js', // Output JavaScript file
          path: path.resolve(__dirname, 'dist'), // Output directory
          clean: true, // Clean the output directory before each build
        },
        module: {
          rules: [
            {
              test: /\.tsx?$/, // Handle .ts and .tsx files with ts-loader
              use: 'ts-loader',
              exclude: /node_modules/,
            },
            {
              test: /\.s[ac]ss$/i, // Handle .sass and .scss files
              use: [
                MiniCssExtractPlugin.loader, // Extract CSS into separate files
                'css-loader', // Translates CSS into CommonJS
                {
                  loader: 'sass-loader', // Compiles Sass to CSS
                  options: {
                    implementation: require('sass'), // Use Dart Sass
                  },
                },
              ],
            },
            {
              test: /\.(png|svg|jpg|jpeg|gif)$/i, // Handle image assets
              type: 'asset/resource',
              generator: {
                filename: 'assets/images/[hash][ext][query]', // Output images to assets folder
              },
            },
            {
              test: /\.html$/i, // Handle HTML files
              loader: 'html-loader',
            },
          ],
        },
        plugins: [
          new HtmlWebpackPlugin({
            template: './src/index.html', // Path to the template HTML file
            inject: 'body', // Inject scripts into the body of the HTML
          }),
          new MiniCssExtractPlugin({
            filename: 'styles.[contenthash].css', // Output CSS file
          }),
          new CopyWebpackPlugin({
            patterns: [
              {
                from: 'public/icons', // Copy icons from public to dist
                to: 'icons', // Destination folder in dist
              },
            ],
          }),
        ],
        resolve: {
          extensions: ['.tsx', '.ts', '.js'], // Resolve these extensions
        },
        optimization: {
          minimize: true, // Minify the output files
          minimizer: [
            new TerserPlugin(), // Minify JavaScript
            new CssMinimizerPlugin({
              parallel: false, // Disable parallel processing
            }), // Minify CSS
          ],
          splitChunks: {
            chunks: 'all', // Split chunks for optimization
          },
        },
        devServer: {
          historyApiFallback: true, // Serve index.html for all 404 routes (SPA)
          static: {
            directory: path.join(__dirname, 'dist'), // Serve static files from dist
          },
          compress: true, // Enable gzip compression
          port: 9000, // Serve on port 9000
          open: true, // Automatically open the browser
        },
      };
  File: directory_structure_and_contents.txt
    Contents:
  File: README.md
    Contents:
      Pages Site
  File: tsconfig.json
    Contents:
      // tsconfig.json
      {
          "compilerOptions": {
              "outDir": "./dist/",
              "sourceMap": true,
              "noImplicitAny": true,
              "module": "es6",
              "target": "es5",
              "jsx": "react",
              "allowJs": true,
              "moduleResolution": "node",
              "esModuleInterop": true,
              "skipLibCheck": true,
              "forceConsistentCasingInFileNames": true
          },
          "include": [
              "src/**/*"
          ]
      }
  File: file_printer.py
    Contents:
      import os
      
      
      def print_directory_contents(root_dir, output_file, ignored_dirs, ignored_files):
          """
          Recursively print the directory structure and file contents into the output file.
      
          Parameters:
          - root_dir: The directory to start scanning from (typically the root of the project).
          - output_file: The file where the directory structure and file contents will be written.
          - ignored_dirs: List of directories to ignore (e.g., node_modules, etc.).
          - ignored_files: List of specific files to ignore (e.g., .gitignore, package.json, etc.).
          """
      
          with open(output_file, "w", encoding="utf-8") as f:
              for dirpath, dirnames, filenames in os.walk(root_dir):
                  # Filter out ignored directories
                  dirnames[:] = [d for d in dirnames if d not in ignored_dirs]
      
                  # Write the current directory name
                  indent_level = dirpath.count(os.sep) - root_dir.count(os.sep)
                  f.write(f"{'  ' * indent_level}Directory: {os.path.basename(dirpath)}\n")
      
                  for filename in filenames:
                      # Skip ignored files
                      if filename in ignored_files:
                          continue
      
                      file_path = os.path.join(dirpath, filename)
      
                      # Write the file name
                      f.write(f"{'  ' * (indent_level + 1)}File: {filename}\n")
                      try:
                          # Write the file contents
                          with open(file_path, "r", encoding="utf-8") as file_content:
                              contents = file_content.read()
                              f.write(f"{'  ' * (indent_level + 2)}Contents:\n")
                              for line in contents.splitlines():
                                  f.write(f"{'  ' * (indent_level + 3)}{line}\n")
                      except Exception as e:
                          # Handle any errors (e.g., binary files or permission errors)
                          f.write(
                              f"{'  ' * (indent_level + 2)}Error reading file: {str(e)}\n"
                          )
      
      
      if __name__ == "__main__":
          # Specify the root directory (where the script is located)
          root_directory = os.path.dirname(os.path.abspath(__file__))
      
          # Specify the output file to save the directory structure and contents
          output_file_path = os.path.join(
              root_directory, "directory_structure_and_contents.txt"
          )
      
          # List of directories to ignore (e.g., 'node_modules' or any other directory you want to exclude)
          directories_to_ignore = [
              "node_modules",
              "dist",
              "venv",
              "__pycache__",
              ".snapshots",
              "misc",
              ".mypy_cache",
              ".alpackages",
              ".git",
          ]
      
          # List of specific files to ignore
          files_to_ignore = [".gitignore", "package.json", "package-lock.json"]
      
          # Call the function to print the directory structure and file contents
          print_directory_contents(
              root_directory, output_file_path, directories_to_ignore, files_to_ignore
          )
      
          print(f"Directory structure and file contents saved to {output_file_path}")
  Directory: public
    Directory: icons
      File: github-mark-white.svg
        Contents:
          <svg width="98" height="96" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z" fill="#fff"/></svg>
      File: github-mark.svg
        Contents:
          <svg width="98" height="96" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z" fill="#24292f"/></svg>
      File: linkedin.svg
        Contents:
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#1d75cc" class="bi bi-linkedin"
              viewBox="0 0 16 16">
              <path
                  d="M0 1.146C0 .513.526 0 1.175 0h13.65C15.474 0 16 .513 16 1.146v13.708c0 .633-.526 1.146-1.175 1.146H1.175C.526 16 0 15.487 0 14.854zm4.943 12.248V6.169H2.542v7.225zm-1.2-8.212c.837 0 1.358-.554 1.358-1.248-.015-.709-.52-1.248-1.342-1.248S2.4 3.226 2.4 3.934c0 .694.521 1.248 1.327 1.248zm4.908 8.212V9.359c0-.216.016-.432.08-.586.173-.431.568-.878 1.232-.878.869 0 1.216.662 1.216 1.634v3.865h2.401V9.25c0-2.22-1.184-3.252-2.764-3.252-1.274 0-1.845.7-2.165 1.193v.025h-.016l.016-.025V6.169h-2.4c.03.678 0 7.225 0 7.225z" />
          </svg>
  Directory: .github
    Directory: workflows
      File: gh-pages.yml
        Contents:
          name: Deploy to GitHub Pages
          
          on:
            push:
              branches:
                - main  # Replace 'main' with your branch if different
          
          jobs:
            build:
              runs-on: ubuntu-latest
          
              permissions:
                contents: write  # Allow actions to push to the repo
          
              steps:
                - name: Checkout code
                  uses: actions/checkout@v2
          
                - name: Set up Node.js
                  uses: actions/setup-node@v2
                  with:
                    node-version: "18" 
          
                - name: Install dependencies
                  run: npm install
          
                - name: Build the project
                  run: npm run build  # Build script generates the 'dist' folder
          
                - name: Deploy to GitHub Pages
                  uses: peaceiris/actions-gh-pages@v3
                  with:
                    github_token: ${{ secrets.GITHUB_TOKEN }}
                    publish_dir: ./dist  # Deploy content from the 'dist' folder
                    publish_branch: gh-pages
                    force_orphan: true  # Force orphan commit, no branch history
  Directory: src
    File: index.html
      Contents:
        <!DOCTYPE html>
        <html lang="en">
        
        <head>
            <meta charset="UTF-8">
            <title>justeoghan</title>
            <meta name="description" content="Personal Website">
            <meta name="keywords" content="Eoghan, Hogan, Portfolio, Projects, Contact, CV">
            <meta name="author" content="Eoghan Hogan">
            <meta name="viewport" content="width=device-width, initial-scale=1">
        </head>
        <body>
            <noscript>Please enable JavaScript to view the site</noscript>
            <!-- Dynamic content will be inserted into this container -->
            <div id="app"></div>
            <script type="application/ld+json">
                {
                  "@context": "http://schema.org",
                  "@type": "Person",
                  "name": "Eoghan Hogan",
                  "url": "https://eoghanhogan.ie",
                  "sameAs": [
                    "https://github.com/dastronmighty",
                    "https://www.linkedin.com/in/eoghanhogan99/",
                  ],
                  "jobTitle": "Machine Learning Engineer",
                  "worksFor": {
                    "@type": "Organization",
                    "name": "Apple"
                  }
                }
                </script>
        </body>
        </html>
    Directory: scss
      File: styles.scss
        Contents:
          // Import utilities first
          @import 'utils/variables';
          @import 'utils/mixins';
          @import 'utils/functions';
          
          // Import base styles
          @import 'base/reset';
          @import 'base/typography';
          
          // Import layout styles
          @import 'layout/grid';
          @import 'layout/header';
          @import 'layout/footer';
          
          // Import component styles
          @import 'components/hero';
          @import 'components/about';
          @import 'components/timeline';
          @import 'components/contact';
          @import 'components/buttons';
      Directory: layout
        File: _grid.scss
          Contents:
        File: _footer.scss
          Contents:
            footer {
                background-color: $background-color;
                color: $text-color;
                padding: 20px 0;
            
                .social-links {
                    display: flex;
                    justify-content: center;
                    margin-bottom: 10px;
            
                    a {
                        margin: 0 10px;
                        display: inline-block;
                        transition: transform 0.3s;
            
                        &:hover {
                            transform: translateY(-5px);
                        }
            
                        img {
                            width: 24px;
                            height: 24px;
                            filter: brightness(0) invert(1);
                        }
                    }
                }
            
                p {
                    text-align: center;
                    font-size: 14px;
                }
            }
        File: _header.scss
          Contents:
            .navbar {
                position: sticky;
                top: 0;
                background-color: $navbar-bg;
                padding: 10px 0;
                z-index: 1000;
            
                ul {
                    display: flex;
                    justify-content: center;
                }
            
                li {
                    margin: 0 15px;
                }
            
                a {
                    font-size: 16px;
                    transition: color 0.3s;
            
                    &:hover {
                        color: $primary-color;
                    }
                }
            }
      Directory: utils
        File: _functions.scss
          Contents:
            @function px-to-rem($px, $base-font-size: 16px) {
                @return ($px / $base-font-size) * 1rem;
            }
        File: _variables.scss
          Contents:
            $primary-color: #b6f0f3;
            $secondary-color: #368f94;
            $background-color: #121212;
            $text-color: #fff;
            $navbar-bg: #1a1a1a;
            $section-bg: #181818;
            $card-bg: #2a2a2a;
            
            $gradient-start: #f200ff;
            $gradient-end: #9d00ff;
            
            $font-family: 'Helvetica', sans-serif;
        File: _mixins.scss
          Contents:
            @mixin squiggly-line($color, $width) {
                background-image: linear-gradient($color, $color, $color , $color);
                background-size: $width auto;
                background-repeat: repeat-y;
            }
      Directory: components
        File: _about.scss
          Contents:
            #about {
                padding: 50px 0 5px;
            
                h2 {
                    text-align: center;
                    margin-bottom: 40px;
                }
            }
        File: _timeline.scss
          Contents:
            .timeline {
                position: relative;
                margin: 20px 0px 10px 0px;
                padding: 0;
                list-style: none;
            
                &::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 50%;
                    width: 4px;
                    height: 100%;
                    background: $primary-color;
                    transform: translateX(-50%);
                }
            
                .timeline-item {
                    position: relative;
                    width: 50%;
                    padding: 20px 40px;
                    box-sizing: border-box;
                    display: flex;
                    justify-content: flex-end;
            
                    &.left {
                        left: 0;
                        text-align: right;
                        flex-direction: row-reverse;
                    }
            
                    &.right {
                        left: 50%;
                        text-align: left;
                    }
            
                    &::before {
                        content: '';
                        position: absolute;
                        top: 20px;
                        width: 20px;
                        height: 20px;
                        background-color: $primary-color;
                        border-radius: 50%;
                        z-index: 1;
                    }
            
                    &.left::before {
                        right: -10px;
                    }
            
                    &.right::before {
                        left: -10px;
                    }
            
                    .content {
                        background: $card-bg;
                        padding: 20px;
                        border-radius: 8px;
                        position: relative;
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                    }
            
                    h3 {
                        margin-top: 0;
                        color: $primary-color;
                    }
            
                    p {
                        margin: 0;
                    }
                }
            }
            
            @media (max-width: 768px) {
            
                .timeline {
            
                    &::before {
                        left: 0%;
                        right: none;
                        transform: none;
                    }
            
                    .timeline-item {
                        width: 100%;
                        left: 0 !important;
                        text-align: left;
                        padding: 20px 20px 20px 40px;
                        display: flex;
                        justify-content: flex-start;
                        flex-direction: row;
            
                        .content {
                            width: 100%;
                        }
            
                        &.right {
                            left: none;
                            text-align: center;
                        }
            
                        &.right::before {
                            left: none;
                        }
                    }
                }
            }
            
            .timeline-item {
                .content {
                    h3 {
                        font-size: 1.25rem;
            
                        @media (max-width: 768px) {
                            font-size: 1.1rem;
                        }
                    }
            
                    p {
                        font-size: 1rem;
            
                        @media (max-width: 768px) {
                            font-size: 0.95rem;
                        }
                    }
                }
            }
        File: _contact.scss
          Contents:
            @use "sass:color";
            
            #contact {
                padding: 50px 0;
            
                h2 {
                    text-align: center;
                    margin-bottom: 40px;
                }
            
                .form-group {
                    margin-bottom: 15px;
            
                    label {
                        display: block;
                        font-weight: bold;
                        margin-bottom: 5px;
                    }
            
                    input,
                    textarea {
                        width: 100%;
                        padding: 10px;
                        border: 1px solid $primary-color;
                        border-radius: 4px;
                        background-color: $background-color;
                        color: $text-color;
                    }
            
                    input::placeholder,
                    textarea::placeholder {
                        color: color.adjust($text-color, $lightness: 20%);
                    }
                }
            
                .btn {
                    margin-top: 10px;
                }
            }
        File: _buttons.scss
          Contents:
            @use "sass:color";
            
            .btn {
                display: inline-block;
                padding: 10px 15px;
                background-color: $secondary-color;
                color: $text-color;
                border-radius: 4px;
                outline: none; // Ensures there's no white outline
                border: none; // Ensures no border appears
                box-shadow: none; // Removes any extra shadow that might cause the white border
                transition: background-color 0.5s ease-in-out; // Smooth transition with ease-in-out
            
                &:hover {
                    background-color: color.adjust($secondary-color, $lightness: -5%);
                    cursor: pointer;
                }
            }
        File: _hero.scss
          Contents:
            #hero {
                position: relative;
                height: 100vh;
                overflow: hidden;
            
                #backgroundanimation {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    z-index: 1; // Ensure canvas is below the content
                }
            
                .hero-content {
                    position: relative;
                    z-index: 50;
                    text-align: center;
                    top: 50%;
                    transform: translateY(-50%);
                    color: white; // Ensure text is visible on the background
            
                    h1 {
                        font-size: 4rem;
            
                        @media (max-width: 768px) {
                            font-size: 3.5rem;
                        }
            
                        @media (max-width: 480px) {
                            font-size: 3rem;
                        }
                    }
            
                    p {
                        font-size: 2rem;
            
                        @media (max-width: 768px) {
                            font-size: 1.5rem;
                        }
                    }
                }
            }
      Directory: base
        File: _typography.scss
          Contents:
            h1,
            h2,
            h3,
            h4,
            h5,
            h6 {
              font-family: $font-family;
              color: $text-color;
              margin: 0 0 20px 0;
            }
            
            p {
              font-size: 16px;
              line-height: 1.6;
              margin: 0 0 20px 0;
            }
        File: _reset.scss
          Contents:
            /* Import Normalize.css */
            @import '~normalize.css';
            
            /* Additional resets */
            * {
                box-sizing: border-box;
            }
            
            body {
                margin: 0;
                font-family: $font-family;
                color: $text-color;
                background-color: $background-color;
            }
            
            a {
                color: $primary-color;
                text-decoration: none;
            }
            
            ul {
                list-style: none;
                padding: 0;
            }
            
            .container {
                width: 90%;
                max-width: 1200px;
                margin: 0 auto;
            }
            
            .divider {
                width: 100%;
                height: 2px;
                margin: 2px auto;
                background: linear-gradient(to right, $gradient-start, $gradient-end);
                box-shadow: 0 0 10px $gradient-start, 0 0 20px $gradient-end;
            }
    Directory: components
      File: contact.ts
        Contents:
          export const Contact = () => `
            <section id="contact">
              <div class="container">
                <h2>Contact Me</h2>
                <form id="contact-form" action="https://formspree.io/f/mblrvzwy" method="POST">
                  <div class="form-group">
                    <label for="name">Name<span aria-hidden="true">*</span></label>
                    <input type="text" id="name" name="name" required aria-required="true" />
                  </div>
                  <div class="form-group">
                    <label for="email">Email<span aria-hidden="true">*</span></label>
                    <input type="email" id="email" name="_replyto" required aria-required="true" />
                  </div>
                  <div class="form-group">
                    <label for="message">Message<span aria-hidden="true">*</span></label>
                    <textarea id="message" name="message" required aria-required="true"></textarea>
                  </div>
                  <button type="submit" class="btn">Send Message</button>
                </form>
              </div>
            </section>
          `;
      File: hero.ts
        Contents:
          const hero_main = 'Eoghan Hogan';
          const hero_secondary = 'Imagine. Create. Commit.'
          
          export const Hero = () => `
            <section id="hero" aria-label="Hero Section">
              <canvas id="backgroundanimation" aria-label="Animated Background"></canvas>
              <div class="hero-content">
                <h1>${hero_main}</h1>
                <p>${hero_secondary}</p>
              </div>
            </section>
          `;
      File: footer.ts
        Contents:
          // components/footer.ts
          export const Footer = () => `
            <footer>
              <div class="container">
                <div class="social-links">
                  <a href="https://github.com/dastronmighty" aria-label="GitHub">
                    <img src="icons/github-mark-white.svg" alt="GitHub" />
                  </a>
                  <a href="https://www.linkedin.com/in/eoghanhogan99/" aria-label="LinkedIn">
                    <img src="icons/linkedin.svg" alt="LinkedIn" />
                  </a>
                </div>
                <p>&copy; ${new Date().getFullYear()} Eoghan Hogan. All rights reserved.</p>
              </div>
            </footer>
          `;
      Directory: about
        File: timelineItems.ts
          Contents:
            export const timelineData = [
                {
                    year: 'Nov 2023 - Present',
                    content: 'Machine Learning Engineer at Apple. Developed full stack data generation app and built an evaluation harness for testing large language models.',
                },
                {
                    year: 'Apr 2023 - Nov 2023',
                    content: 'Full Stack Engineer at Apple. Implemented real-time sharable notes in internal collaboration tool using PHP and YJS.',
                },
                {
                    year: 'Oct 2022 - Apr 2023',
                    content: 'Technical Program Manager at Apple. Led ML project for Apple Care eMail, working with stakeholders and providing regular updates.',
                },
                {
                    year: 'Mar 2022 - Oct 2022',
                    content: 'Data Scientist + Web Developer at Apple. Created a web tool for time-series peak-trough detection and sequence identification.',
                },
                {
                    year: 'Sep 2021 - Mar 2022',
                    content: 'Support Data Scientist at Apple SAP. Developed an anomaly detection pipeline for invoice prediction.',
                },
                {
                    year: 'Mar 2020 - Sep 2020',
                    content: 'ML Intern at Apple. Worked on multilingual sentiment analysis and named entity recognition systems.',
                },
                {
                    year: 'Jun 2019 - Aug 2019',
                    content: 'IT Intern at Bizintra Financial Academy. Maintained and improved the company website and user experience.',
                },
                {
                    year: 'Jun 2018 - Aug 2018',
                    content: 'Tech Intern at CarTrawler. Built customer satisfaction web app and debugging tool for cab-hailing app.',
                },
                {
                    year: '2017 - 2021',
                    content: 'Bachelor of Science in Computer Science with Data Science, University College Dublin. First Class Honours, awarded Franz Geiselbrechtinger Medal.',
                },
            ];
        File: about.ts
          Contents:
            import { timelineData } from './timelineItems'
            
            export const About = () => `
              <section id="about">
                <div class="container">
                  <h2>About Me</h2>
                  <div class="timeline">
                    ${generateTimelineItems()}
                  </div>
                </div>
              </section>
            `;
            
            // Generate timeline items dynamically
            function generateTimelineItems() {
              const isMobile = window.screen.width <= 780;
              return timelineData
                .map(
                  (item, index) => `
                <div class="timeline-item ${isMobile ? 'right' : index % 2 === 0 ? 'left' : 'right'}"
                    key=${index}
                  aria-label="Timeline item: ${item.year}"
                >
                  <div class="content">
                    <h3>${item.year}</h3>
                    <p>${item.content}</p>
                  </div>
                </div>
              `
                )
                .join('');
            }
    Directory: ts
      File: script.ts
        Contents:
          import '../scss/styles.scss'; // Import your SCSS styles
          import './background_animation';
          import { Hero } from '../components/hero';
          import { About } from '../components/about/about';
          import { Contact } from '../components/contact';
          import { Footer } from '../components/footer';
          
          // Dynamically load components into the #app container
          const app = document.getElementById('app');
          if (app) {
              app.innerHTML = `
              ${Hero()}
              <div class="divider"></div>
              ${About()}
              <div class="divider"></div>
              ${Contact()}
              <div class="divider"></div>
              ${Footer()}
            `;
          }
          
          // Add smooth scroll functionality after DOM content is loaded
          document.addEventListener('DOMContentLoaded', () => {
              // Smooth scroll functionality
              const anchors = document.querySelectorAll('a[href^="#"]');
              anchors.forEach(anchor => {
                  anchor.addEventListener('click', function (e) {
                      e.preventDefault();
                      const targetId = this.getAttribute('href')?.substring(1);
                      const targetElement = document.getElementById(targetId);
          
                      if (targetElement) {
                          targetElement.scrollIntoView({ behavior: 'smooth' });
                      }
                  });
              });
          });
      File: types.ts
        Contents:
          export interface Mouse {
              x: number | undefined;
              y: number | undefined;
              radius: number;
          }
          
          export interface Particle {
              x: number;
              y: number;
              size: number;
              color: string;
              baseX: number;
              baseY: number;
              density: number;
              speed: {
                  x: number;
                  y: number;
              };
              remove?: boolean;
          }
          
          export type CreateParticle = (x: number, y: number, size: number, color: string) => Particle;
          
          export type UpdateParticle = (particle: Particle, mouse: Mouse, canvasWidth: number, canvasHeight: number) => Particle;
          
          export type DrawParticle = (ctx: CanvasRenderingContext2D, particle: Particle) => void;
      File: background_animation.ts
        Contents:
          import { createParticle } from './particle/createParticle';
          import { updateParticle } from './particle/updateParticle';
          import { drawParticle } from './particle/drawParticle';
          import { Particle, Mouse } from './types';
          
          document.addEventListener('DOMContentLoaded', () => {
              const canvas = document.getElementById('backgroundanimation') as HTMLCanvasElement;
          
              // Check if canvas is present in the DOM
              if (!canvas) {
                  console.error('Canvas element not found');
                  return;
              }
          
              // Get the 2D drawing context
              const ctx = canvas.getContext('2d');
              if (!ctx) {
                  console.error('2D context not available on canvas');
                  return;
              }
          
              // Particle array and mouse object
              let particlesArray: Particle[] = [];
              const mouse: Mouse = { x: undefined, y: undefined, radius: 150 };
          
              // Maximum number of particles allowed
              const maxParticles = 100;
          
              // Set canvas dimensions
              function setCanvasDimensions() {
                  canvas.width = window.innerWidth;
                  canvas.height = window.innerHeight;
              }
          
              // Initialize the particles
              function initParticles() {
                  particlesArray = [];
                  const numberOfParticles = 80;
                  const neonColors = ['#f200ff', '#9d00ff', '#00ff15', '#4afff9', '#cc00ff', '#e100ff'];
          
                  for (let i = 0; i < numberOfParticles; i++) {
                      const size = Math.random() * 5 + 5;
                      const x = Math.random() * canvas.width;
                      const y = Math.random() * canvas.height;
                      const color = neonColors[Math.floor(Math.random() * neonColors.length)];
                      particlesArray.push(createParticle(x, y, size, color));
                  }
              }
          
              // Connect particles with lines based on proximity
              function connectParticles() {
                  particlesArray.forEach((particleA, a) => {
                      particlesArray.forEach((particleB, b) => {
                          if (b <= a) return; // Skip already checked particles
                          const distance = (particleA.x - particleB.x) ** 2 + (particleA.y - particleB.y) ** 2;
                          if (distance < (canvas.width / 7) * (canvas.height / 7)) {
                              ctx.strokeStyle = 'rgba(242, 255, 255, 0.5)';
                              ctx.lineWidth = 1;
                              ctx.beginPath();
                              ctx.moveTo(particleA.x, particleA.y);
                              ctx.lineTo(particleB.x, particleB.y);
                              ctx.stroke();
                          }
                      });
                  });
              }
          
              // Animate the particles (main animation loop)
              function animate() {
                  ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas before drawing
          
                  // Update and draw particles, and remove those moving towards the mouse
                  particlesArray = particlesArray.filter(particle => {
                      updateParticle(particle, mouse, canvas.width, canvas.height); // Update particle
                      drawParticle(ctx, particle); // Draw particle on the canvas
          
                      // Return only particles not marked for removal
                      return !particle.remove;
                  });
          
                  connectParticles(); // Connect particles with lines if necessary
          
                  // Call animate recursively for the next frame
                  requestAnimationFrame(animate);
              }
          
              // Event listener for mouse movement to track mouse position
              canvas.addEventListener('mousemove', event => {
                  const rect = canvas.getBoundingClientRect();
                  mouse.x = event.clientX - rect.left;
                  mouse.y = event.clientY - rect.top;
              });
          
              // Event listener for mouse out (to stop interaction when mouse leaves canvas)
              canvas.addEventListener('mouseout', () => {
                  mouse.x = undefined;
                  mouse.y = undefined;
              });
          
              // Event listener for adding particles on click
              canvas.addEventListener('click', event => {
                  const rect = canvas.getBoundingClientRect();
                  const x = event.clientX - rect.left;
                  const y = event.clientY - rect.top;
          
                  const neonColors = ['#f200ff', '#9d00ff', '#00ff15', '#4afff9', '#cc00ff', '#e100ff'];
                  const size = Math.random() * 5 + 5;
                  const color = neonColors[Math.floor(Math.random() * neonColors.length)];
          
                  // Add a new particle
                  particlesArray.push(createParticle(x, y, size, color));
          
                  // If we have more than maxParticles, remove the oldest particle
                  if (particlesArray.length > maxParticles) {
                      particlesArray.shift(); // Remove the first particle in the array
                  }
              });
          
              // Handle window resizing
              window.addEventListener('resize', () => {
                  setCanvasDimensions();
                  initParticles(); // Re-initialize particles when the window size changes
              });
          
              // Set up canvas dimensions, initialize particles, and start the animation loop
              setCanvasDimensions();
              initParticles();
              animate(); // Start the animation loop
          });
      Directory: particle
        File: createParticle.ts
          Contents:
            import { CreateParticle } from '../types';
            
            export const createParticle: CreateParticle = (x, y, size, color) => ({
                x,
                y,
                size,
                color,
                baseX: x,
                baseY: y,
                density: (Math.random() * 30) + 10,
                speed: {
                    x: Math.random() * 0.4 - 0.1,
                    y: Math.random() * 0.4 - 0.1,
                },
            });
        File: updateParticle.ts
          Contents:
            import { UpdateParticle } from '../types';
            
            export const updateParticle: UpdateParticle = (particle, mouse, canvasWidth, canvasHeight) => {
                // Move the particle by its speed
                particle.x += particle.speed.x;
                particle.y += particle.speed.y;
            
                // Reverse direction if the particle goes off the canvas (bounce effect)
                if (particle.x > canvasWidth || particle.x < 0) {
                    particle.speed.x *= -1;
                }
                if (particle.y > canvasHeight || particle.y < 0) {
                    particle.speed.y *= -1;
                }
                return particle;
            };
        File: drawParticle.ts
          Contents:
            import { DrawParticle } from '../types';
            
            export const drawParticle: DrawParticle = (ctx, particle) => {
                ctx.fillStyle = particle.color;
                ctx.beginPath();
                ctx.shadowBlur = 10;
                ctx.shadowColor = particle.color;
                ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                ctx.closePath();
                ctx.fill();
            };
